{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://raw.githubusercontent.com/F5Networks/f5-declarative-onboarding/master/schema/network.schema.json",
    "title": "F5 Declarative Onboarding network declaration",
    "description": "Network properties for onboarding a BIG-IP.",
    "allOf": [
        {
            "if": {
                "required": ["class"],
                "properties": { "class": { "const": "MAC_Masquerade" } }
            },
            "then": {
                "required": ["class"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains MAC masqueerade configuration.",
                        "type": "string",
                        "const": "MAC_Masquerade"
                    },
                    "source": {
                        "description": "MAC address source to use for masquerading.",
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "interface": {
                                        "description": "Generate a MAC address from an interface",
                                        "type": "string"
                                    }
                                },
                                "required": ["interface"],
                                "additionalProperties": false
                            }
                        ]
                    },
                    "trafficGroup": {
                        "description": "Traffic group to apply the MAC masquerade to.",
                        "type": "string",
                        "enum": ["traffic-group-local-only", "traffic-group-1"],
                        "default": "traffic-group-1"
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "if": {
                "required": ["class"],
                "properties": { "class": { "const": "Trunk" } }
            },
            "then": {
                "required": ["class"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains Trunk configuration.",
                        "type": "string",
                        "const": "Trunk"
                    },
                    "distributionHash": {
                        "description": "Specifies the basis for the hash that the system uses as the frame distribution algorithm.  Choices are 'dst-mac' (use the destination MAC addresses), 'src-dist-mac' (use the source, destination, and MAC addresses), or 'src-dst-ipport' (use the source and destination IP addresses and ports).",
                        "type": "string",
                        "enum": ["dst-mac", "src-dst-ipport", "src-dst-mac"],
                        "default": "dst-mac"
                    },
                    "interfaces": {
                        "description": "Interfaces for the Trunk.  The number of interfaces used is recommended to be a power of 2 (for example 2, 4, or 8).  Interfaces must be untagged.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": []
                    },
                    "lacpEnabled": {
                        "description": "Specifies, when true, that the system supports the link aggregation control protocol (LACP), which monitors the trunk by exchanging control packets over the member links to determine the health of the links.",
                        "type": "boolean",
                        "default": false
                    },
                    "lacpMode": {
                        "description": "Specifies the operation mode for LACP if the lacp option is enabled for the trunk.  The values are 'active' (specifies the system periodically transmits LACP packets, regardless of the control value of the peer system) and 'passive' (specifies the system periodically transmits LACP packets, unless the control value of the peer system is active).",
                        "type": "string",
                        "enum": ["active", "passive"],
                        "default": "active"
                    },
                    "lacpTimeout": {
                        "description": "Specifies the rate at which the system sends the LACP control packets.",
                        "type": "string",
                        "enum": ["long", "short"],
                        "default": "long"
                    },
                    "linkSelectPolicy": {
                        "description": "Sets the LACP policy that the trunk uses to determine which member link (interface) can handle new traffic.",
                        "type": "string",
                        "enum": ["auto", "maximum-bandwidth"],
                        "default": "auto"
                    },
                    "qinqEthertype": {
                        "description": "Specifies the ether-type value used for the packets handled on this trunk when it is a member in a QinQ vlan.",
                        "type": "string",
                        "pattern": "^0x[a-fA-F0-9]{4}$",
                        "default": "0x8100"
                    },
                    "spanningTreeEnabled": {
                        "description": "Enables the spanning tree protocols (STP).",
                        "type": "boolean",
                        "default": true
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "if": {
                "required": ["class"],
                "properties": { "class": { "const": "VLAN" } }
            },
            "then": {
                "required": ["class", "interfaces"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains VLAN configuration.",
                        "type": "string",
                        "const": "VLAN"
                    },
                    "mtu": {
                        "description": "MTU for the VLAN.",
                        "type": "integer",
                        "minimum": 576,
                        "maximum": 9198,
                        "default": 1500
                    },
                    "tag": {
                        "description": "Tag for the VLAN.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 4094
                    },
                    "interfaces": {
                        "description": "Interfaces for the VLAN.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "required": ["name"],
                            "properties": {
                                "name": {
                                    "description": "Name of the interface.",
                                    "type": "string"
                                },
                                "tagged": {
                                    "description": "Whether or not the interface is tagged. Default is true if a VLAN tag is provided, otherwise false.",
                                    "type": "boolean"
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "cmpHash": {
                        "description": "Specifies how the traffic on the VLAN will be disaggregated.",
                        "type": "string",
                        "enum": ["default", "dst-ip", "src-ip"],
                        "default": "default"
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "if": {
                "required": ["class"],
                "properties": { "class": { "const": "SelfIp" } }
            },
            "then": {
                "required": ["class", "address", "vlan"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains Self IP configuration.",
                        "type": "string",
                        "const": "SelfIp"
                    },
                    "address": {
                        "description": "IP address.",
                        "type": "string",
                        "format": "f5ip"
                    },
                    "trafficGroup": {
                        "description": "Traffic group for the Self IP.",
                        "type": "string",
                        "enum": ["traffic-group-local-only", "traffic-group-1"],
                        "default": "traffic-group-local-only"
                    },
                    "vlan": {
                        "description": "VLAN for the self IP.",
                        "type": "string"
                    },
                    "allowService": {
                        "description": "Which services (ports) to allow on the self IP. Value should be 'all', 'none', 'default', or array of '<service:port>",
                        "oneOf": [
                            {
                                "type": "string",
                                "enum": ["all", "none", "default"]
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "(\\w+:\\d+)"
                                }
                            }
                        ],
                        "default": "default"
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "if": {
                "required": ["class"],
                "properties": { "class": { "const": "Route" } }
            },
            "then": {
                "required": ["class", "gw"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains Route configuration.",
                        "type": "string",
                        "const": "Route"
                    },
                    "gw": {
                        "description": "Gateway for the route.",
                        "type": "string",
                        "anyOf": [
                            { "format": "ipv4" },
                            { "format": "ipv6" }
                        ]
                    },
                    "network": {
                        "description": "IP address/netmask for route",
                        "type": "string",
                        "anyOf": [
                            { "format": "f5ip" },
                            { "enum": ["default", "default-inet6"]}
                        ],
                        "default": "default"
                    },
                    "mtu": {
                        "description": "MTU for the route.",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 9198
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "if": {
                "required": ["class"],
                "properties": { "class": { "const": "RouteDomain" } }
            },
            "then": {
                "required": ["class", "id"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains Route Domain configuration.",
                        "type": "string",
                        "const": "RouteDomain"
                    },
                    "id": {
                        "description": "Specifies a unique numeric identifier for the route domain.",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 65534
                    },
                    "bandWidthControllerPolicy": {
                        "description": "Specifies the bandwidth controller policy for the route domain.",
                        "type": "string"
                    },
                    "connectionLimit": {
                        "description": "The connection limit for the route domain.",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 4294967295,
                        "default": 0
                    },
                    "flowEvictionPolicy": {
                        "description": "Specifies a flow eviction policy for the route domain to use.",
                        "type": "string"
                    },
                    "ipIntelligencePolicy": {
                        "description": "Specifies an IP intelligence policy for the route domain to use.",
                        "type": "string"
                    },
                    "enforcedFirewallPolicy": {
                        "description": "Specifies an enforced firewall policy on the route domain.",
                        "type": "string"
                    },
                    "stagedFirewallPolicy": {
                        "description": "Specifies a staged firewall policy on the route domain.",
                        "type": "string"
                    },
                    "securityNatPolicy": {
                        "description": "Specifies the security NAT policy for the route domain.",
                        "type": "string"
                    },
                    "servicePolicy": {
                        "description": "Specifies the service policy for the route domain.",
                        "type": "string"
                    },
                    "strict": {
                        "description": "Determines whether a connection can span route domains.",
                        "type": "boolean",
                        "default": true
                    },
                    "routingProtocols": {
                        "description": "Specifies routing protocols for the system to use in the route domain.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": ["BFD", "BGP", "IS-IS", "OSPFv2", "OSPFv3", "PIM", "RIP", "RIPng"]
                        }
                    },
                    "vlans": {
                        "description": "Specifies VLANS for the system to use in the route domain.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "if": {
                "required": ["class"],
                "properties": { "class": { "const": "DagGlobals" } }
            },
            "then": {
                "required": ["class"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains DAG Globals configuration.",
                        "type": "string",
                        "const": "DagGlobals"
                    },
                    "icmpHash": {
                        "description": "Specifies ICMP hash for ICMP echo request and ICMP echo reply in SW DAG.",
                        "type": "string",
                        "enum": ["icmp", "ipicmp"],
                        "default": "icmp"
                    },
                    "ipv6PrefixLength": {
                        "description": "Specifies whether SPDAG or IPv6 prefix DAG should be used to disaggregate IPv6 traffic when vlan cmp hash is set to src-ip or dst-ip.",
                        "type": "integer",
                        "default": 128,
                        "minimum": 0,
                        "maximum": 128
                    },
                    "roundRobinMode": {
                        "description": "Specifies whether the round robin disaggregator (DAG) on a blade can disaggregate packets to all the TMMs in the system or only to the TMMs local to the blade.",
                        "type": "string",
                        "enum": ["global", "local"],
                        "default": "global"
                    }
                },
                "additionalProperties": false
            }
        }
    ]
}