image: node:latest

stages:
    - lint
    - test
    - build
    - docs
    - deploy
    - integration-test
    - teardown
    - post build
    - publish

variables:
    PROJECT_NAME: ${BIGIP_VERSION}
    PROJECT_DIR: /root/deploy-projects/${CI_PROJECT_NAME}
    NUMBER_OF_BIGIP: 3
    DO_LICENSING: 'false'
    DO_PROVISIONING: 'false'
    DO_PHONING_HOME: 'false'
    TEST_HARNESS_FILE: ${CI_PROJECT_DIR}/harness_facts_flat_${BIGIP_VERSION}.json
    BIGIP_VERSION: ${DEFAULT_BIGIP_VERSION}
    BIGIP_BUILD: ${DEFAULT_BIGIP_BUILD}
    ESR_PRODUCT: DO
    ESR_TEST_RUN_ID: ${CI_JOB_ID}
    ESR_TEST_RUN_WEB_URL: ${CI_JOB_URL}

lint:
    stage: lint
    tags:
        - cm-official-docker-executor
    script:
        - npm ci
        - npm run lint

test_node:4:
    image: node:4
    stage: test
    tags:
        - do-test-docker-executor
    script:
        - npm install --global npm@5.10.0
        - npm install
        - npm install mocha@5.2.0
        - npm test

test_node:6:
    image: node:6
    stage: test
    tags:
        - do-test-docker-executor
    script:
        - npm install
        - npm install mocha@6.2.2
        - npm test

test_node:8:
    image: node:8
    stage: test
    tags:
        - do-test-docker-executor
    script:
        - npm ci
        - npm install mocha@7
        - npm test

test_node:latest:
    stage: test
    tags:
        - do-test-docker-executor
    script:
        - npm ci
        - if [ "$REPORT_UNIT_TESTS" = "true" ]; then
        -   export ESR_TEST_TYPE=unit
        -   export ESR_PRODUCT_VERSION=$(node -e "console.log(require('./package.json').version)" | cut -d '-' -f1)
        -   export GIT_SSL_NO_VERIFY=1
        -   npm install git+https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_HOST}/automation-toolchain/atg-shared-utilities.git#develop
        -   npm test -- --reporter atg-shared-utilities/src/mochaReporters/elasticSearchReporter/elasticSearchReporter.js
        - else
        -   npm test
        - fi

# the following variables should be defined for deploy, integration-tests and teardown:
# CICD_AUTH_OS_USERNAME - VIO user
# CICD_AUTH_OS_PASSWORD - VIO password
# CICD_AUTH_OS_PROJECT  - VIO project
# BIGIP_VERSION         - BIG-IP Version (ex: 13.1.1.4)
# BIGIP_BUILD           - BIG-IP Build (ex: 0.0.4)
deploy:
    image: ${CICD_CONTAINER_DEPLOY_ARTIFACTORY}
    tags:
        - cm-official-docker-executor
    only:
        - schedules
        - tags
        - triggers
    stage: deploy
    variables:
        DEFAULT_RETRY_DELAY: 20
        DEFAULT_RETRIES: 60
        DEVICE_ANSIBLE_CONNECTION_DELAY: 10
        DEVICE_ANSIBLE_CONNECTION_RETRIES: 100
        DEVICE_FAILOVER_LINKSUP_DELAY: 10
        DEVICE_HTTPS_PORT_DELAY: 10
        SSH_AVAILABILITY_DELAY: 10
        SSH_AVAILABILITY_RETRIES: 100
        VIO_DEPLOYMENT_DELAY: 20
        VIO_DEPLOYMENT_RETRIES: 100
    script:
        - export RPM_PACKAGE=$(ls ${CI_PROJECT_DIR}/dist/*.rpm)
        - cd /root/cicd-bigip-deploy && make configure && make printvars
        - ls -als "${PROJECT_DIR}"
        - cat "${PROJECT_DIR}/project-declaration-parsed"
        - make setup
        - cp ${PROJECT_DIR}/harness_facts_flat.json ${TEST_HARNESS_FILE}
        - cd ${CI_PROJECT_DIR}
        - if [[ $? != 0 ]]; then echo setup failed && exit 1; fi
        - curl -sL https://rpm.nodesource.com/setup_12.x | bash -
        - yum install -y nodejs
        - npm install
        - node test/integration/setup.js
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_bigip_${BIGIP_BRANCH}.${BIGIP_VERSION}.${BIGIP_BUILD}_harness_info
        paths:
            - ${TEST_HARNESS_FILE}
        expire_in: 1 day

integration-test:
    tags:
        - cm-official-docker-executor
    only:
        - schedules
        - tags
        - triggers
    stage: integration-test
    script:
        - export ESR_TEST_TYPE=integration
        - export ESR_PRODUCT_VERSION=$(node -e "console.log(require('./package.json').version)" | cut -d '-' -f1)
        - export ESR_BIG_IP_VERSION=${BIGIP_VERSION}
        - export GIT_SSL_NO_VERIFY=1
        - npm install
        - npm install git+https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_HOST}/automation-toolchain/atg-shared-utilities.git#develop
        - echo BIGIP_VERSION $BIGIP_VERSION
        - npm run integration -- --reporter atg-shared-utilities/src/mochaReporters/elasticSearchReporter/elasticSearchReporter.js
    after_script:
        - apt-get update
        - apt-get install -y jq
        - apt-get install -y expect
        - scripts/dev/collectRemoteIntegrationTestLogs.sh ${TEST_HARNESS_FILE}
    artifacts:
        name: f5-declarative-onboarding-$CI_BUILD_REF
        when: always
        paths:
            - test/logs

teardown:
    image: ${CICD_CONTAINER_DEPLOY_ARTIFACTORY}
    tags:
        - cm-official-docker-executor
    script:
        - cd /root/cicd-bigip-deploy && make configure && make teardown
    when: always
    only:
        - schedules
        - tags
        - triggers
    stage: teardown

build rpm:
    image: f5devcentral/containthedocs:rpmbuild
    stage: build
    tags:
        - cm-official-docker-executor
    script:
        # setup node environment
        - npm install --global npm@5.10.0
        - scripts/build/buildRpm.sh
    artifacts:
        name: ${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_PIPELINE_IID}
        paths:
            - dist/
        expire_in: 1 week

build asg:
    image: docker:latest
    stage: post build
    except:
        - schedules
    tags:
        - cm-official-docker-executor
    dependencies:
        - build rpm
    script:
        - IMAGE_NAME=f5-do-container
        - ORGANIZATION_NAME=f5devcentral
        - TARGET=$(ls dist/*.rpm)
        # TAG is VERSION-RELEASE. Use awk to remove everything else
        - IMAGE_TAG=$(echo $(basename $TARGET) | awk -F- -v PROJECT_NAME=${CI_PROJECT_NAME}- '{sub(PROJECT_NAME, ""); sub(".noarch.rpm", ""); print}')
        - if [[ ${CI_COMMIT_REF_NAME} == 'master' ]]; then
        -     IMAGE_TAG=$(echo $IMAGE_TAG | grep -o "^[^-]\+")
        - elif [[ ${CI_COMMIT_REF_NAME} != 'develop' ]]; then
        -     IMAGE_TAG=$CI_COMMIT_REF_NAME
        - fi
        - echo ${TARGET} ${IMAGE_TAG}
        - docker build -f scripts/build/Dockerfile.asg -t ${ORGANIZATION_NAME}/${IMAGE_NAME}:${IMAGE_TAG} --build-arg TARGET=$TARGET .
        - docker save ${ORGANIZATION_NAME}/${IMAGE_NAME}:${IMAGE_TAG} | gzip -c > dist/${ORGANIZATION_NAME}-${IMAGE_NAME}-${IMAGE_TAG}.tar.gz
    artifacts:
        name: ${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_PIPELINE_IID}
        paths:
            - dist/
        expire_in: 1 week

create postman collection:
    stage: post build
    except:
        - schedules
    tags:
        - cm-official-docker-executor
    script:
        - node scripts/build/generatePostmanCollection.js
    artifacts:
        name: ${CI_PROJECT_NAME}-${CI_JOB_NAME}-${CI_PIPELINE_IID}
        paths:
            - dist/
        expire_in: 1 week

publish to artifactory:
    stage: publish
    only:
        - tags
    tags:
        - cm-official-docker-executor
    script:
        - VERSION=$(node -e "console.log(require('./package.json').version)" | cut -d '-' -f1)
        - RPM_FILE=$(ls dist/*.rpm)
        - RPM_NAME=$(basename $RPM_FILE)
        - HASH_FILE=${RPM_FILE}.sha256
        - HASH_NAME=$(basename $HASH_FILE).txt
        - POSTMAN_FILE=$(ls dist/*.collection.json)
        - POSTMAN_NAME=$(basename $POSTMAN_FILE)
        - >-
            UPLOAD_RESULT=$(curl -H "X-JFrog-Art-Api:$ARTIFACTORY_API_KEY" -X PUT --data-binary @${RPM_FILE}
            ${ARTIFACTORY_BASE_URL}/f5-automation-toolchain-generic/f5-declarative-onboarding/${VERSION}/${RPM_NAME})
        - echo $UPLOAD_RESULT
        - if [[ "$UPLOAD_RESULT" == *errors* ]]; then echo error during RPM upload; exit 1; fi
        - >-
            UPLOAD_RESULT=$(curl -H "X-JFrog-Art-Api:$ARTIFACTORY_API_KEY" -X PUT --data-binary @${HASH_FILE}
            ${ARTIFACTORY_BASE_URL}/f5-automation-toolchain-generic/f5-declarative-onboarding/${VERSION}/${HASH_NAME})
        - echo $UPLOAD_RESULT
        - if [[ "$UPLOAD_RESULT" == *errors* ]]; then echo error during hash upload; exit 1; fi
        - >-
            UPLOAD_RESULT=$(curl -H "X-JFrog-Art-Api:$ARTIFACTORY_API_KEY" -X PUT --data-binary @${POSTMAN_FILE}
            ${ARTIFACTORY_BASE_URL}/f5-automation-toolchain-generic/f5-declarative-onboarding/${VERSION}/${POSTMAN_NAME})
        - echo $UPLOAD_RESULT
        - if [[ "$UPLOAD_RESULT" == *errors* ]]; then echo error during collection upload; exit 1; fi

create docs:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: build
    except:
        - tags
        - schedules
    script:
        - if [ "$CI_COMMIT_REF_NAME" = "docs-staging" ] || [ "$CI_COMMIT_REF_NAME" = "docs-latest" ]; then
        -   rm -rf docs/_templates
        - fi
        - make html
        - echo "Checking grammar and style"
        # Runs the grammar check on everything except the /docs/drafts directory
        - vale --glob='*.rst' .
        - echo "Checking links"
        - make linkcheck
    tags:
        - cm-official-docker-executor
    artifacts:
        expire_in: 1 week
        name: sphinx-docs_$CI_COMMIT_SHA
        paths:
            - docs/_build/html

# Deploy docs to Pages for review
# Docs are staged on this projects pages site
pages:
    stage: docs
    except:
        - tags
        - schedules
    environment:
        name: review
        url: https://${CI_PROJECT_NAMESPACE}.${PAGES_DOMAIN}/${CI_PROJECT_NAME}/
    tags:
        - cm-official-docker-executor
    dependencies:
        - create docs
    script:
        - PUBLIC_DIR='./public'
        - mkdir -p ${PUBLIC_DIR}
        # place index.html in public dir
        - cp docs/index.html ${PUBLIC_DIR}/index.html
        ## place public facing docs under: /public-docs ##
        - PUBLIC_DOCS=${PUBLIC_DIR}/public-docs
        - mkdir -p ${PUBLIC_DOCS}
        - cp -R docs/_build/html/* ${PUBLIC_DOCS}
        ## place code coverage docs under: /coverage-docs ##
        - npm install
        - npm run coverage
        - COVERAGE_DOCS=${PUBLIC_DIR}/coverage-docs
        - mkdir -p ${COVERAGE_DOCS}
        - cp -R coverage/* ${COVERAGE_DOCS}
        ## place code contribution docs (includes presentation) under: /contribute-docs ##
        - CONTRIBUTE_DOCS=${PUBLIC_DIR}/contribute-docs
        - CONTRIBUTE_DIR=contributing
        # install presentation site dependencies
        - cd ${CONTRIBUTE_DIR} && npm install && cd ..
        - mkdir -p ${CONTRIBUTE_DOCS}
        - cp -R ${CONTRIBUTE_DIR}/* ${CONTRIBUTE_DOCS}
        - BASE_URL_FOR_LINKS=${CI_PROJECT_URL}/tree/${CI_COMMIT_REF_NAME}/${CONTRIBUTE_DIR}/
        - README=${CONTRIBUTE_DOCS}/README.md
        # make absolute URL(s) for relative URL(s) outside current directory '../'
        - sed -i -E 's/\[.*\]\(\.\./&SED_TEMP/' ${README} && sed -i "s|..SED_TEMP|${BASE_URL_FOR_LINKS}..|" ${README}
    artifacts:
        paths:
            - public
    only:
        - develop
        - doc-release-branch

publish docs to production:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: docs
    environment:
        name: production
        url: https://clouddocs.f5.com/products/extensions/f5-declarative-onboarding/latest
    only:
        # Currently will only deploy to clouddocs.f5.com on commits to doc-publish
        # fill in desired release branch name and uncomment to add deployment from a branch
        - docs-latest@automation-toolchain/f5-declarative-onboarding
    tags:
        - cm-official-docker-executor
    dependencies:
        - create docs
    script:
        # Publish docs to clouddocs.f5.com (live site).
        - publish-product-docs-to-prod extensions/f5-declarative-onboarding/latest
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-declarative-onboarding
