image: node:8

stages:
    - test
    - build
    - post build
    - publish

test:
    stage: test
    tags:
        - docker-executor
    script:
        - npm install
        - npm run lint
        - npm test

build rpm:
    image: node:8-alpine
    stage: build
    tags:
        - docker-executor
    script:
        - apk add rpm bash
        - build/buildRpm.sh
    artifacts:
        name: ${CI_PROJECT_NAME}-${CI_BUILD_REF}
        paths:
            - build/rpmbuild/RPMS/noarch/

build asg:
    image: docker:latest
    stage: post build
    tags:
        - docker-executor
    dependencies:
        - build rpm
    script:
        - TARGET=$(ls build/rpmbuild/RPMS/noarch/*.rpm)
        - IMAGE_NAME=f5-do-container
        # TAG is VERSION-RELEASE. Use awk to remove everything else
        - IMAGE_TAG=$(echo $(basename $TARGET) | awk -F- -v PROJECT_NAME=${CI_PROJECT_NAME}- '{sub(PROJECT_NAME, ""); sub(".noarch.rpm", ""); print}')
        - if [[ ${CI_COMMIT_REF_NAME} == 'master' ]]; then
        -     IMAGE_TAG=$(echo $IMAGE_TAG | grep -o "^[^-]\+")
        - elif [[ ${CI_COMMIT_REF_NAME} != 'develop' ]]; then
        -     IMAGE_TAG=$CI_COMMIT_REF_NAME
        - fi
        - docker build -f build/Dockerfile.asg -t ${IMAGE_NAME}:${IMAGE_TAG} --build-arg TARGET=$TARGET .
        - docker save ${IMAGE_NAME}:${IMAGE_TAG} | gzip -c > dist/${IMAGE_NAME}-${IMAGE_TAG}.tar.gz
    artifacts:
        name: ${CI_PROJECT_NAME}-${CI_BUILD_REF}
        paths:
            - dist/*.tar.gz

create docs:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: build
    script:
        - make html
        - echo "Checking grammar and style"
        # Runs the grammar check on everything except the /docs/drafts directory
        - vale --glob='*.rst' .
        - echo "Checking links"
        - make linkcheck
    tags:
        - cm-official-docker-executor
    artifacts:
        expire_in: 1 week
        name: sphinx-docs_$CI_BUILD_REF
        paths:
            - docs/_build/html

# Deploy docs to Pages for review
# Docs are staged on this projects pages site
pages:
    stage: publish
    environment:
        name: review
        url: https://${CI_PROJECT_NAMESPACE}.${PAGES_DOMAIN}/${CI_PROJECT_NAME}/
    tags:
        - cm-official-docker-executor
    dependencies:
        - create docs
    script:
        - mkdir -p ./public
        - cp -R docs/_build/html/* ./public
    artifacts:
        paths:
            - public
    only:
        - branches

publish docs to staging:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: publish
    environment:
        name: staging
        url: https://clouddocs.f5networks.net/products/extensions/f5-declarative-onboarding/latest
    tags:
        - cm-official-docker-executor
    only:
        - doc-staging@cloudsolutions/f5-declarative-onboarding
    dependencies:
        - create docs
    script:
        - aws s3 sync docs/_build/html s3://clouddocs.f5networks.net/products/extensions/f5-declarative-onboarding/latest
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-declarative-onboarding/latest/

publish docs to production:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: publish
    environment:
        name: production
        url: https://clouddocs.f5.com/products/extensions/f5-declarative-onboarding/latest
    only:
        # Currently will only deploy to clouddocs.f5.com on commits to doc-publish
        # fill in desired release branch name and uncomment to add deployment from a branch
        - doc-publish@cloudsolutions/f5-declarative-onboarding
    tags:
        - cm-official-docker-executor
    dependencies:
        - create docs
    script:
        # Publish docs to clouddocs.f5.com (live site).
        - publish-product-docs-to-prod extensions/f5-declarative-onboarding/latest
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST --paths /products/extensions/f5-declarative-onboarding
