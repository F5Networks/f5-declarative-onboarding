{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://raw.githubusercontent.com/F5Networks/f5-declarative-onboarding/master/schema/system.schema.json",
    "title": "F5 Declarative Onboarding system declaration",
    "description": "System properties for onboarding a BIG-IP.",
    "allOf": [
        {
            "if": { "properties": { "class": { "const": "License" } } },
            "then": {
                "oneOf": [
                    { "$ref": "#/definitions/regKeyInfo" },
                    { "$ref": "#/definitions/licensePoolInfo" }
                ],
                "if": {"properties": { "licenseType": { "const": "licensePool" } } },
                "then": {
                    "properties": {
                        "unitOfMeasure": {
                            "default": "monthly"
                        }
                    }
                }
            }
        },
        {
            "if": { "properties": { "class": { "const": "DbVariables" } } },
            "then": {
                "required": ["class"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains global db variable configuration.",
                        "type": "string",
                        "const": "DbVariables"
                    }
                },
                "propertyNames": {
                    "description": "The name of the db variable."
                },
                "additionalProperties": {
                    "description": "The value to set for the db variable."
                }
            }
        },
        {
            "if": { "properties": { "class": { "const": "Provision" } } },
            "then": {
                "required": ["class"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains module provisioning configuration.",
                        "type": "string",
                        "const": "Provision"
                    }
                },
                "propertyNames": {
                    "description": "The module to provision.",
                    "enum": [
                        "class",
                        "afm",
                        "am",
                        "apm",
                        "asm",
                        "avr",
                        "dos",
                        "fps",
                        "gtm",
                        "ilx",
                        "lc",
                        "ltm",
                        "pem",
                        "swg",
                        "urldb"
                    ]
                },
                "additionalProperties": {
                    "description": "The level at which to provision the module.",
                    "type": "string",
                    "enum": ["dedicated", "nominal", "minimum", "none"]
                }
            }
        },
        {
            "if": { "properties": { "class": { "const": "DNS" } } },
            "then": {
                "required": ["class"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains DNS configuration.",
                        "type": "string",
                        "const": "DNS"
                    },
                    "nameServers": {
                        "description": "IP addresses of name servers to use for DNS.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "anyOf": [
                                { "format": "ipv4" },
                                { "format": "ipv6" }
                            ]
                        }
                    },
                    "search": {
                        "description": "Search domain to use for DNS.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "hostname"
                        }
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "if": { "properties": { "class": { "const": "NTP" } } },
            "then": {
                "required": ["class"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains NTP configuration.",
                        "type": "string",
                        "const": "NTP"
                    },
                    "servers": {
                        "description": "IP addresses of servers to use for NTP.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "anyOf": [
                                { "format": "ipv4" },
                                { "format": "ipv6" },
                                { "format": "hostname" }
                            ]
                        }
                    },
                    "timezone": {
                        "description": "The timezone to set.",
                        "type": "string"
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "if": { "properties": { "class": { "const": "SnmpAgent" } } },
            "then": {
                "required": ["class"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains basic SNMP agent configuration.",
                        "type": "string",
                        "const": "SnmpAgent"
                    },
                    "contact": {
                        "description": "The name of the person who administers the SNMP service for this system.",
                        "type": "string"
                    },
                    "location": {
                        "description": "The description of this system's physical location.",
                        "type": "string"
                    },
                    "allowList": {
                        "description": "Allowed client IP addresses.",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "f5ip"
                        }
                    }
                },
                "additionalProperties": false
            }
        },
        {
            "if": { "properties": { "class": { "const": "SnmpCommunity" } } },
            "then": {
                "required": ["class"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains SNMP v1 or v2c community configuration.",
                        "type": "string",
                        "const": "SnmpCommunity"
                    },
                    "ipv6": {
                        "description": "Specifies whether the record applies to IPv6 addresses.",
                        "type": "boolean",
                        "default": false
                    },
                    "source": {
                        "description": "Specifies the source address for access to the MIB.",
                        "type": "string"
                    },
                    "oid": {
                        "description": "Specifies the current object identifier (OID) for the record.",
                        "type": "string"
                    },
                    "access": {
                        "description": "Whether the user's access level to the MIB is readOnly.",
                        "type": "string",
                        "enum": [ "ro", "rw" ],
                        "default": "ro"
                    },
                    "name": {
                        "description": "Overrides using the object name as the community name. Use this if you want special characters in the community name.",
                        "type": "string"
                    }
                },
                "if": {
                    "required": ["oid"]
                },
                "then": {
                    "required": ["source"]
                },
                "additionalProperties": false
            }
        },
        {
            "if": { "properties": { "class": { "const": "SnmpUser" } } },
            "then": {
                "required": ["class"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains SNMP v3 user configuration.",
                        "type": "string",
                        "const": "SnmpUser"
                    },
                    "authentication": {
                        "description": "Specifies the user's authentication method and password.",
                        "type": "object",
                        "required": [ "protocol", "password" ],
                        "properties": {
                            "protocol": {
                                "description": "Authentication protocol.",
                                "type": "string",
                                "enum": ["sha", "md5"],
                                "default": "sha"
                            },
                            "password": {
                                "description": "Specifies the password for the user.",
                                "type": "string"
                            }
                        },
                        "additionalProperties": false
                    },
                    "privacy": {
                        "description": "Specifies the privacy protcol to use to deliver authentication information for this user.",
                        "type": "object",
                        "required": [ "protocol", "password" ],
                        "properties": {
                            "protocol": {
                                "description": "Specifies the encryption protocol.",
                                "type": "string",
                                "enum": ["aes", "des"],
                                "default": "aes"
                            },
                            "password": {
                                "description": "Specifies the password for the user.",
                                "type": "string"
                            }
                        }
                    },
                    "oid": {
                        "description": "Specifies the current object identifier (OID) for the record.",
                        "type": "string",
                        "default": ".1"
                    },
                    "access": {
                        "description": "Whether the user's access level to the MIB is readOnly.",
                        "type": "string",
                        "enum": ["ro", "rw"],
                        "default": "ro"
                    },
                    "name": {
                        "description": "Overrides using the object name as the username. Use this if you want special characters in the username.",
                        "type": "string"
                    }
                },
                "additionalProperties": false,
                "if": {
                    "required": [ "privacy" ]
                },
                "then": {
                    "required": [ "authentication" ]
                }
            }
        },
        {
            "if": { "properties": { "class": { "const": "SnmpTrapEvents" } } },
            "then": {
                "required": ["class"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains SNMP trap configuration.",
                        "type": "string",
                        "const": "SnmpTrapEvents"
                    },
                    "agentStartStop": {
                        "description": "Indicates whether to send a trap when the SNMP agent starts/stops.",
                        "type": "boolean",
                        "default": true
                    },
                    "authentication": {
                        "description": "Indicates whether to send authentication warning traps.",
                        "type": "boolean",
                        "default": false
                    },
                    "device": {
                        "description": "Indicates whether to send device warning traps.",
                        "type": "boolean",
                        "default": true
                    }
                }
            }
        },
        {
            "if": { "properties": { "class": { "const": "SnmpTrapDestination" } } },
            "then": {
                "required": ["class", "version", "destination", "port", "network"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains SNMP trap configuration.",
                        "type": "string",
                        "const": "SnmpTrapDestination"
                    },
                    "version": {
                        "description": "Specifies to which Simple Network Management Protocol (SNMP) version the trap destination applies.",
                        "type": "string",
                        "enum": ["1", "2c", "3"]
                    },
                    "destination": {
                        "description": "Specifies the address for the trap destination.",
                        "type": "string",
                        "oneOf": [
                            { "format": "ipv4" },
                            { "format": "ipv6" }
                        ]
                    },
                    "port": {
                        "description": "Specifies the port for the trap destination.",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 65535
                    },
                    "network": {
                        "description": "Specifies the trap network. The system sends the SNMP trap out the specified network. 'management' specifies that the system sends the trap out of the management IP address. 'other' specifies that the system sends the trap out of the interface based on the routing tables.",
                        "type": "string",
                        "enum": ["management", "other"]
                    }
                },
                "if": { "properties": { "version": { "const" : "3" } } },
                "then": {
                    "required": ["securityName", "authentication"],
                    "properties": {
                        "securityName": {
                            "description": "Specifies the user name the system uses to handle SNMP v3 traps.",
                            "type": "string"
                        },
                        "authentication": {
                            "description": "Specifies the user's authentication method and password.",
                            "type": "object",
                            "required": [ "protocol", "password" ],
                            "properties": {
                                "protocol": {
                                    "description": "Authentication protocol.",
                                    "type": "string",
                                    "enum": ["sha", "md5"]
                                },
                                "password": {
                                    "description": "Specifies the password for the user.",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        },
                        "privacy": {
                            "description": "Specifies the privacy protcol to use to deliver authentication information for this user.",
                            "type": "object",
                            "properties": {
                                "protocol": {
                                    "description": "Specifies the encryption protocol.",
                                    "type": "string",
                                    "enum": ["aes", "des"]
                                },
                                "password": {
                                    "description": "Specifies the password for the user.",
                                    "type": "string"
                                }
                            }
                        },
                        "engineId": {
                            "description": "Specifies the unique identifier (snmpEngineID) of the remote SNMP protocol engine.",
                            "type": "string"
                        }
                    }
                },
                "else": {
                    "required": ["community"],
                    "properties": {
                        "community": {
                            "description": "Specifies the community name for the trap destination.",
                            "type": "string"
                        }
                    }
                }
            }
        },
        {
            "if": { "properties": { "class": { "const": "User" } } },
            "then": {
                "if": { "properties": { "userType": { "const": "root" } } },
                "then": {
                    "required": ["class", "userType", "newPassword", "oldPassword"],
                    "properties": {
                        "class": {
                            "description": "Indicates that this property contains user configuration.",
                            "type": "string",
                            "const": "User"
                        },
                        "userType": {
                            "description": "The type of user.",
                            "type": "string",
                            "const": "root"
                        },
                        "newPassword": {
                            "description": "Password to set for the root user.",
                            "type": "string",
                            "anyOf": [
                                { "format": "json-pointer" },
                                { "pattern": "^.{0,254}$" }
                            ]
                        },
                        "oldPassword": {
                            "description": "Old password for the root user.",
                            "type": "string",
                            "anyOf": [
                                { "format": "json-pointer" },
                                { "pattern": "^.{0,254}$" }
                            ]
                        },
                        "keys": {
                            "description": "An array of public keys for the user. If the user is root, this will preserve only the master key and then overwrite the rest in the file: /root/.ssh/authorized_keys.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        }
                    },
                    "additionalProperties": false
                },
                "else": {
                    "required": ["class", "userType"],
                    "properties": {
                        "class": {
                            "description": "Indicates that this property contains user configuration.",
                            "type": "string",
                            "const": "User"
                        },
                        "userType": {
                            "description": "The type of user.",
                            "type": "string",
                            "const": "regular"
                        },
                        "password": {
                            "description": "Password for the user.",
                            "type": "string",
                            "anyOf": [
                                { "format": "json-pointer" },
                                { "pattern": "^.{0,254}$" }
                            ]
                        },
                        "partitionAccess": {
                            "description": "Access control configuration.",
                            "type": "object",
                            "properties": {
                                "Common": {
                                    "$ref": "#/definitions/partitionAccess"
                                },
                                "all-partitions": {
                                    "$ref": "#/definitions/partitionAccess"
                                }
                            },
                            "additionalProperties": false
                        },
                        "shell": {
                            "description": "Shell for the user.",
                            "type": "string",
                            "enum": ["bash", "tmsh", "none"],
                            "default": "tmsh"
                        },
                        "keys": {
                            "description": "An array of public keys for the user. These will overwrite the /home/username/.ssh/authorized_keys if not root.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": []
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        {
            "if": { "properties": { "class": { "const": "ManagementRoute" } } },
            "then": {
                "required": ["class"],
                "properties": {
                    "class": {
                        "description": "Indicates this property contains management route configuration",
                        "type": "string",
                        "const": "ManagementRoute"
                    },
                    "gw": {
                        "description": "Gateway for the management route.",
                        "type": "string",
                        "anyOf": [
                            { "format": "ipv4" },
                            { "format": "ipv6" }
                        ]
                    },
                    "network": {
                        "description": "IP address/netmask for the management route",
                        "type": "string",
                        "anyOf": [
                            { "format": "f5ip" },
                            { "enum": ["default", "default-inet6"]}
                        ],
                        "default": "default"
                    },
                    "mtu": {
                        "description": "MTU for the management route.",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 65535
                    },
                    "type": {
                        "description": "Type of the management route",
                        "type": "string",
                        "enum": [
                            "interface",
                            "blackhole"
                        ]
                    }
                },
                "additionalProperties": false,
                "if": {
                    "properties": {
                        "network": {
                            "not": {
                                "enum": ["default", "default-inet6"]
                            }
                        }
                    }
                },
                "then": {
                    "required": ["gw"]
                }
            }
        },
        {
            "if": { "properties": { "class": { "const": "SyslogRemoteServer" } } },
            "then": {
                "required": ["class", "host"],
                "properties": {
                    "class": {
                        "description": "Indicates that this property contains Syslog Remote Server Information",
                        "type": "string",
                        "const": "SyslogRemoteServer"
                    },
                    "host": {
                        "description": "Specifies the IP address of a remote server to which syslog sends messages.",
                        "type": "string",
                        "anyOf": [
                            { "format": "ipv4" },
                            { "format": "ipv6" },
                            { "format": "hostname" }
                        ]
                    },
                    "localIp": {
                        "description": "Specifies the IP address of the interface syslog binds with in order to log messages to a remote host.",
                        "type": "string",
                        "anyOf": [
                            { "format": "ipv4" },
                            { "format": "ipv6" }
                        ]
                    },
                    "remotePort": {
                        "description": "Specifies the port to which the syslog sends messages.",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 65535,
                        "default": 514
                    }
                },
                "additionalProperties": false
            }
        }
    ],
    "definitions": {
        "partitionAccess": {
            "description": "The partition - either 'Common' or 'all-partitions'.",
            "type": "object",
            "required": ["role"],
            "properties": {
                "role": {
                    "description": "Role for the user.",
                    "type": "string",
                    "enum": [
                        "admin",
                        "auditor",
                        "guest",
                        "manager",
                        "operator",
                        "user-manager",
                        "application-editor",
                        "certificate-manager",
                        "irule-manager",
                        "no-access",
                        "resource-admin"
                    ]
                }
            },
            "additionalProperties": false
        },
        "regKeyInfo": {
            "description": "Registration key information.",
            "required": ["class", "licenseType", "regKey"],
            "properties": {
                "class": {
                    "description": "Indicates that this property contains licensing information.",
                    "type": "string",
                    "const": "License"
                },
                "licenseType": {
                    "description": "The type of license",
                    "type": "string",
                    "const": "regKey"
                },
                "regKey": {
                    "description": "Registration key.",
                    "type": "string",
                    "pattern": "^([A-Z]{5}-[A-Z]{5}-[A-Z]{5}-[A-Z]{5}-[A-Z]{7})|([A-Z][0-9]{4}-[0-9]{5}-[0-9]{5}-[0-9]{5}-[0-9]{7})$"
                },
                "addOnKeys": {
                    "description": "Add on keys.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "pattern": "^[A-Z]{7}-[A-Z]{7}$",
                        "uniqueItems": true
                    }
                },
                "overwrite": {
                    "description": "Whether or not to overwrite the license if the device is already licensed.",
                    "type": "boolean",
                    "default": false
                }
            },
            "additionalProperties": false
        },
        "licensePoolInfo": {
            "required": ["class", "licenseType"],
            "if": {
                "properties": { "reachable": { "const": false }}
            },
            "then": {
                "if": {
                    "required": ["licensePool"]
                },
                "then": {
                    "required": ["hypervisor"]
                }
            },
            "else": {
                "if": {
                    "required": ["licensePool"]
                },
                "then": {
                    "required": ["bigIpUsername", "bigIpPassword"]
                }
            },
            "properties": {
                "class": {
                    "description": "Indicates that this property contains licensing information.",
                    "type": "string",
                    "const": "License"
                },
                "licenseType": {
                    "description": "The type of license",
                    "type": "string",
                    "const": "licensePool"
                },
                "licensePool": {
                    "description": "Name of the BIG-IQ license pool from which to get a new license.",
                    "type": "string"
                },
                "skuKeyword1": {
                    "description": "skuKeyword1 parameter for subscription licensing.",
                    "type": "string"
                },
                "skuKeyword2": {
                    "description": "skuKeyword2 parameter for subscription licensing.",
                    "type": "string"
                },
                "unitOfMeasure": {
                    "description": "unitOfMeasure parameter for subscription licensing.",
                    "type": "string",
                    "enum": ["yearly", "monthly", "daily", "hourly"]
                },
                "hypervisor": {
                    "description": "Hypervisor which is running the BIG-IP. Required by BIG-IQ if 'reachable' is false.",
                    "type": "string",
                    "enum": ["aws", "azure", "gce", "vmware", "hyperv", "kvm", "xen"]
                },
                "bigIpUsername": {
                    "description": "An admin user on the BIG-IP. Used by BIG-IQ to login to BIG-IP if 'reachable' is true.",
                    "type": "string",
                    "anyOf": [
                        { "format": "json-pointer" },
                        { "pattern": "^.{0,254}$" }
                    ]
                },
                "bigIpPassword": {
                    "description": "Password for the user in bigIpUsername. Used by BIG-IQ to login to BIG-IP if 'reachable' is true.",
                    "type": "string",
                    "anyOf": [
                        { "format": "json-pointer" },
                        { "pattern": "^.{0,254}$" }
                    ]
                },
                "overwrite": {
                    "description": "Whether or not to overwrite the license if the device is already licensed.",
                    "type": "boolean",
                    "default": false
                },
                "revokeFrom": {
                    "description": "Current license should be revoked from the pool specified. Either just the name of the pool (if old license is on the same BIG-IQ as in the main License section) or full licensePoolInfo (if old license is on a different BIG-IQ)",
                    "oneOf": [
                        { "type": "string" },
                        {
                            "required": ["licensePool"],
                            "properties": {
                                "licensePool": {
                                    "description": "Name of the BIG-IQ license pool.",
                                    "type": "string"
                                }
                            },
                            "allOf": [
                                { "$ref": "#/definitions/bigIqHostInfo" }
                            ]
                        }
                    ]
                }
            },
            "allOf": [
                { "$ref": "#/definitions/bigIqHostInfo" }
            ]
        },
        "bigIqHostInfo": {
            "description": "BIG-IQ host/credentials information",
            "type": "object",
            "allOf": [
                {
                    "if": {
                        "required": ["bigIqPassword"]
                    },
                    "then": {
                        "dependencies": {
                            "bigIqPasswordUri": {
                                "not": {}
                            }
                        }
                    }
                },
                {
                    "if": {
                        "required": ["bigIqHost"]
                    },
                    "then": {
                        "if": { "not": {"properties": { "bigIqHost": { "const": "localhost" } } } },
                        "then": {
                            "required": ["bigIqUsername"],
                            "oneOf": [
                                { "required": ["bigIqPassword"] },
                                { "required": ["bigIqPasswordUri"] }
                            ]
                        }
                    }
                }
            ],
            "properties": {
                "bigIqHost": {
                    "description": "The BIG-IQ hostname or IP address.",
                    "type": "string",
                    "anyOf": [
                        { "format": "ipv4" },
                        { "format": "ipv6" },
                        { "format": "hostname" }
                    ]
                },
                "bigIqUsername": {
                    "description": "An admin user on the BIG-IQ.",
                    "type": "string",
                    "anyOf": [
                        { "format": "json-pointer" },
                        { "pattern": "^[^:]{0,254}$" }
                    ]
                },
                "bigIqPassword": {
                    "description": "Password for the user in bigIqUsername.",
                    "type": "string",
                    "anyOf": [
                        { "format": "json-pointer" },
                        { "pattern": "^.{0,254}$" }
                    ]
                },
                "bigIqPasswordUri": {
                    "description": "URI which will return the password for the user in bigIqUsername.",
                    "type": "string",
                    "format": "uri"
                },
                "reachable": {
                    "description": "Whether or not BIG-IQ has a route to the BIG-IP device.",
                    "type": "boolean",
                    "default": true
                }
            }
        }
    }
}
